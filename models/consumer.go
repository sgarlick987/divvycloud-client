// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Consumer Consumer
// swagger:model Consumer
type Consumer struct {

	// account id
	// Required: true
	AccountID *string `json:"account_id"`

	// cloud type id
	// Required: true
	CloudTypeID *string `json:"cloud_type_id"`

	// errors
	// Required: true
	Errors []string `json:"errors"`

	// events
	// Required: true
	Events *int32 `json:"events"`

	// name
	// Required: true
	Name *string `json:"name"`

	// organization service id
	// Required: true
	OrganizationServiceID *int32 `json:"organization_service_id"`

	// pending
	// Required: true
	Pending *bool `json:"pending"`

	// producers
	// Required: true
	Producers *int32 `json:"producers"`
}

// Validate validates this consumer
func (m *Consumer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudTypeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProducers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Consumer) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validateCloudTypeID(formats strfmt.Registry) error {

	if err := validate.Required("cloud_type_id", "body", m.CloudTypeID); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validateErrors(formats strfmt.Registry) error {

	if err := validate.Required("errors", "body", m.Errors); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validateOrganizationServiceID(formats strfmt.Registry) error {

	if err := validate.Required("organization_service_id", "body", m.OrganizationServiceID); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validatePending(formats strfmt.Registry) error {

	if err := validate.Required("pending", "body", m.Pending); err != nil {
		return err
	}

	return nil
}

func (m *Consumer) validateProducers(formats strfmt.Registry) error {

	if err := validate.Required("producers", "body", m.Producers); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Consumer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Consumer) UnmarshalBinary(b []byte) error {
	var res Consumer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
