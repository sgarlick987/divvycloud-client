// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Common7 Common7
// swagger:model Common7
type Common7 struct {

	// account
	// Required: true
	Account *string `json:"account"`

	// cloud
	// Required: true
	Cloud *string `json:"cloud"`

	// creation timestamp
	// Required: true
	CreationTimestamp *string `json:"creation_timestamp"`

	// discovered timestamp
	// Required: true
	DiscoveredTimestamp *string `json:"discovered_timestamp"`

	// modified timestamp
	// Required: true
	ModifiedTimestamp *string `json:"modified_timestamp"`

	// noncompliance
	// Required: true
	Noncompliance []*Noncompliance `json:"noncompliance"`

	// organization service id
	// Required: true
	OrganizationServiceID *int32 `json:"organization_service_id"`

	// properties
	// Required: true
	Properties *Properties `json:"properties"`

	// region
	// Required: true
	Region *string `json:"region"`

	// resource id
	// Required: true
	ResourceID *string `json:"resource_id"`

	// resource name
	// Required: true
	ResourceName *string `json:"resource_name"`

	// resource type
	// Required: true
	ResourceType *string `json:"resource_type"`
}

// Validate validates this common7
func (m *Common7) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloud(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiscoveredTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoncompliance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Common7) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateCloud(formats strfmt.Registry) error {

	if err := validate.Required("cloud", "body", m.Cloud); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateCreationTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("creation_timestamp", "body", m.CreationTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateDiscoveredTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("discovered_timestamp", "body", m.DiscoveredTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateModifiedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("modified_timestamp", "body", m.ModifiedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateNoncompliance(formats strfmt.Registry) error {

	if err := validate.Required("noncompliance", "body", m.Noncompliance); err != nil {
		return err
	}

	for i := 0; i < len(m.Noncompliance); i++ {
		if swag.IsZero(m.Noncompliance[i]) { // not required
			continue
		}

		if m.Noncompliance[i] != nil {
			if err := m.Noncompliance[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("noncompliance" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Common7) validateOrganizationServiceID(formats strfmt.Registry) error {

	if err := validate.Required("organization_service_id", "body", m.OrganizationServiceID); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateProperties(formats strfmt.Registry) error {

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *Common7) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resource_id", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateResourceName(formats strfmt.Registry) error {

	if err := validate.Required("resource_name", "body", m.ResourceName); err != nil {
		return err
	}

	return nil
}

func (m *Common7) validateResourceType(formats strfmt.Registry) error {

	if err := validate.Required("resource_type", "body", m.ResourceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Common7) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Common7) UnmarshalBinary(b []byte) error {
	var res Common7
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
