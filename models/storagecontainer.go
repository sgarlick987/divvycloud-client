// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Storagecontainer Storagecontainer
// swagger:model Storagecontainer
type Storagecontainer struct {

	// common
	// Required: true
	Common *Common7 `json:"common"`

	// creation date
	// Required: true
	CreationDate *string `json:"creation_date"`

	// encrypted
	// Required: true
	Encrypted *bool `json:"encrypted"`

	// object count
	// Required: true
	ObjectCount *int32 `json:"object_count"`

	// total size
	// Required: true
	TotalSize *int32 `json:"total_size"`
}

// Validate validates this storagecontainer
func (m *Storagecontainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncrypted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Storagecontainer) validateCommon(formats strfmt.Registry) error {

	if err := validate.Required("common", "body", m.Common); err != nil {
		return err
	}

	if m.Common != nil {
		if err := m.Common.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common")
			}
			return err
		}
	}

	return nil
}

func (m *Storagecontainer) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("creation_date", "body", m.CreationDate); err != nil {
		return err
	}

	return nil
}

func (m *Storagecontainer) validateEncrypted(formats strfmt.Registry) error {

	if err := validate.Required("encrypted", "body", m.Encrypted); err != nil {
		return err
	}

	return nil
}

func (m *Storagecontainer) validateObjectCount(formats strfmt.Registry) error {

	if err := validate.Required("object_count", "body", m.ObjectCount); err != nil {
		return err
	}

	return nil
}

func (m *Storagecontainer) validateTotalSize(formats strfmt.Registry) error {

	if err := validate.Required("total_size", "body", m.TotalSize); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Storagecontainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Storagecontainer) UnmarshalBinary(b []byte) error {
	var res Storagecontainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
