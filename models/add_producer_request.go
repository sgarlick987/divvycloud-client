// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddProducerRequest AddProducerRequest
// swagger:model AddProducerRequest
type AddProducerRequest struct {

	// enable all types
	// Required: true
	EnableAllTypes *bool `json:"enable_all_types"`

	// organization service ids
	// Required: true
	OrganizationServiceIds []int32 `json:"organization_service_ids"`

	// propagate
	// Required: true
	Propagate *Propagate `json:"propagate"`

	// regions
	// Required: true
	Regions []string `json:"regions"`

	// resource types
	// Required: true
	ResourceTypes []string `json:"resource_types"`
}

// Validate validates this add producer request
func (m *AddProducerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnableAllTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationServiceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropagate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddProducerRequest) validateEnableAllTypes(formats strfmt.Registry) error {

	if err := validate.Required("enable_all_types", "body", m.EnableAllTypes); err != nil {
		return err
	}

	return nil
}

func (m *AddProducerRequest) validateOrganizationServiceIds(formats strfmt.Registry) error {

	if err := validate.Required("organization_service_ids", "body", m.OrganizationServiceIds); err != nil {
		return err
	}

	return nil
}

func (m *AddProducerRequest) validatePropagate(formats strfmt.Registry) error {

	if err := validate.Required("propagate", "body", m.Propagate); err != nil {
		return err
	}

	if m.Propagate != nil {
		if err := m.Propagate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("propagate")
			}
			return err
		}
	}

	return nil
}

func (m *AddProducerRequest) validateRegions(formats strfmt.Registry) error {

	if err := validate.Required("regions", "body", m.Regions); err != nil {
		return err
	}

	return nil
}

func (m *AddProducerRequest) validateResourceTypes(formats strfmt.Registry) error {

	if err := validate.Required("resource_types", "body", m.ResourceTypes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AddProducerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddProducerRequest) UnmarshalBinary(b []byte) error {
	var res AddProducerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
