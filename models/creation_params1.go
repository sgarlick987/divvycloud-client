// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreationParams1 CreationParams1
// swagger:model CreationParams1
type CreationParams1 struct {

	// account number
	// Required: true
	AccountNumber *string `json:"account_number"`

	// authentication type
	// Required: true
	AuthenticationType *string `json:"authentication_type"`

	// cloud type
	// Required: true
	CloudType *string `json:"cloud_type"`

	// duration
	// Required: true
	Duration *int32 `json:"duration"`

	// name
	// Required: true
	Name *string `json:"name"`

	// role arn
	// Required: true
	RoleArn *string `json:"role_arn"`

	// session name
	// Required: true
	SessionName *string `json:"session_name"`
}

// Validate validates this creation params1
func (m *CreationParams1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreationParams1) validateAccountNumber(formats strfmt.Registry) error {

	if err := validate.Required("account_number", "body", m.AccountNumber); err != nil {
		return err
	}

	return nil
}

func (m *CreationParams1) validateAuthenticationType(formats strfmt.Registry) error {

	if err := validate.Required("authentication_type", "body", m.AuthenticationType); err != nil {
		return err
	}

	return nil
}

func (m *CreationParams1) validateCloudType(formats strfmt.Registry) error {

	if err := validate.Required("cloud_type", "body", m.CloudType); err != nil {
		return err
	}

	return nil
}

func (m *CreationParams1) validateDuration(formats strfmt.Registry) error {

	if err := validate.Required("duration", "body", m.Duration); err != nil {
		return err
	}

	return nil
}

func (m *CreationParams1) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreationParams1) validateRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("role_arn", "body", m.RoleArn); err != nil {
		return err
	}

	return nil
}

func (m *CreationParams1) validateSessionName(formats strfmt.Registry) error {

	if err := validate.Required("session_name", "body", m.SessionName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreationParams1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreationParams1) UnmarshalBinary(b []byte) error {
	var res CreationParams1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
