// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PrototypeDomainOrganizationCreatePost creates new organization

Creates a new isolated environment. After creating organizations a domain admin user must switch contexts into the organization using the `Switch organization` endpoint.
*/
func (a *Client) PrototypeDomainOrganizationCreatePost(params *PrototypeDomainOrganizationCreatePostParams) (*PrototypeDomainOrganizationCreatePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrototypeDomainOrganizationCreatePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PrototypeDomainOrganizationCreatePost",
		Method:             "POST",
		PathPattern:        "/prototype/domain/organization/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrototypeDomainOrganizationCreatePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PrototypeDomainOrganizationCreatePostOK), nil

}

/*
PrototypeDomainOrganizationDeleteByOrganizationResourceIDDelete deletes organization

Deletes organization and deletes all cloud account and resource data as well as all users and bot data.
*/
func (a *Client) PrototypeDomainOrganizationDeleteByOrganizationResourceIDDelete(params *PrototypeDomainOrganizationDeleteByOrganizationResourceIDDeleteParams) (*PrototypeDomainOrganizationDeleteByOrganizationResourceIDDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrototypeDomainOrganizationDeleteByOrganizationResourceIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PrototypeDomainOrganizationDeleteByOrganizationResourceIdDelete",
		Method:             "DELETE",
		PathPattern:        "/prototype/domain/organization/{organization_resource_id}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrototypeDomainOrganizationDeleteByOrganizationResourceIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PrototypeDomainOrganizationDeleteByOrganizationResourceIDDeleteOK), nil

}

/*
PrototypeDomainOrganizationUpdateByOrganizationResourceIDPost edits organization name

Changes name of organization. Organization names are globally unique for installations. Conflicting names will raise an error.
*/
func (a *Client) PrototypeDomainOrganizationUpdateByOrganizationResourceIDPost(params *PrototypeDomainOrganizationUpdateByOrganizationResourceIDPostParams) (*PrototypeDomainOrganizationUpdateByOrganizationResourceIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrototypeDomainOrganizationUpdateByOrganizationResourceIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PrototypeDomainOrganizationUpdateByOrganizationResourceIdPost",
		Method:             "POST",
		PathPattern:        "/prototype/domain/organization/{organization_resource_id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrototypeDomainOrganizationUpdateByOrganizationResourceIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PrototypeDomainOrganizationUpdateByOrganizationResourceIDPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
