// Code generated by go-swagger; DO NOT EDIT.

package clouds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new clouds API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clouds API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PrototypeCloudUpdateByCloudIDPost deletes cloud

Updates a cloud account. This updates the properties of an existing cloud account.
*/
func (a *Client) PrototypeCloudUpdateByCloudIDPost(params *PrototypeCloudUpdateByCloudIDPostParams) (*PrototypeCloudUpdateByCloudIDPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrototypeCloudUpdateByCloudIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PrototypeCloudUpdateByCloudIdPost",
		Method:             "POST",
		PathPattern:        "/prototype/cloud/{cloud_id}/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PrototypeCloudUpdateByCloudIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PrototypeCloudUpdateByCloudIDPostCreated), nil

}

/*
PublicCloudDeleteByCloudResourceIDPost deletes cloud

Delete a cloud account. This flips the cloud account status to delete and schedules a job to clean up all resources, properties, etc.
*/
func (a *Client) PublicCloudDeleteByCloudResourceIDPost(params *PublicCloudDeleteByCloudResourceIDPostParams) (*PublicCloudDeleteByCloudResourceIDPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudDeleteByCloudResourceIDPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudDeleteByCloudResourceIdPost",
		Method:             "POST",
		PathPattern:        "/public/cloud/{cloud_resource_id}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudDeleteByCloudResourceIDPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudDeleteByCloudResourceIDPostOK), nil

}

/*
PublicCloudsListGet lists clouds

List available configured clouds.
*/
func (a *Client) PublicCloudsListGet(params *PublicCloudsListGetParams) (*PublicCloudsListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudsListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudsListGet",
		Method:             "GET",
		PathPattern:        "/public/clouds/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudsListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudsListGetOK), nil

}

/*
PublicCloudtypesListGet lists cloud types

List supported clouds with their type (public/private)
*/
func (a *Client) PublicCloudtypesListGet(params *PublicCloudtypesListGetParams) (*PublicCloudtypesListGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudtypesListGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudtypesListGet",
		Method:             "GET",
		PathPattern:        "/public/cloudtypes/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudtypesListGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudtypesListGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
