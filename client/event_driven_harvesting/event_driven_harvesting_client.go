// Code generated by go-swagger; DO NOT EDIT.

package event_driven_harvesting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event driven harvesting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event driven harvesting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
PublicCloudConsumersGet lists consumers

TODO: Add Description
*/
func (a *Client) PublicCloudConsumersGet(params *PublicCloudConsumersGetParams) (*PublicCloudConsumersGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudConsumersGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudConsumersGet",
		Method:             "GET",
		PathPattern:        "/public/cloud/consumers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudConsumersGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudConsumersGetOK), nil

}

/*
PublicCloudEventdrivenharvest gets event driven harvesting

Gets the status of Event Driven Harvesting for the current org
*/
func (a *Client) PublicCloudEventdrivenharvest(params *PublicCloudEventdrivenharvestParams) (*PublicCloudEventdrivenharvestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvest",
		Method:             "GET",
		PathPattern:        "/public/cloud/eventdrivenharvest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestOK), nil

}

/*
PublicCloudEventdrivenharvestByOrganizationidPost adds consumer

TODO: Add Description
*/
func (a *Client) PublicCloudEventdrivenharvestByOrganizationidPost(params *PublicCloudEventdrivenharvestByOrganizationidPostParams) (*PublicCloudEventdrivenharvestByOrganizationidPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestByOrganizationidPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvestByOrganizationidPost",
		Method:             "POST",
		PathPattern:        "/public/cloud/eventdrivenharvest/{organizationid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestByOrganizationidPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestByOrganizationidPostOK), nil

}

/*
PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPost adds producer

TODO: Add Description
*/
func (a *Client) PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPost(params *PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPostParams) (*PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPost",
		Method:             "POST",
		PathPattern:        "/public/cloud/eventdrivenharvest/consumer/{organizationid}/producers/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestConsumerProducersAddByOrganizationidPostOK), nil

}

/*
PublicCloudEventdrivenharvestDisable disables event driven harvesting

Disables Event Driven Harvesting for the current org
*/
func (a *Client) PublicCloudEventdrivenharvestDisable(params *PublicCloudEventdrivenharvestDisableParams) (*PublicCloudEventdrivenharvestDisableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestDisableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvestDisable",
		Method:             "DELETE",
		PathPattern:        "/public/cloud/eventdrivenharvest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestDisableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestDisableOK), nil

}

/*
PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDelete removes consumer

TODO: Add Description
*/
func (a *Client) PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDelete(params *PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDeleteParams) (*PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestDisableConsumerByOrganizationidDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDelete",
		Method:             "DELETE",
		PathPattern:        "/public/cloud/eventdrivenharvest/{organizationid}/disable-consumer",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestDisableConsumerByOrganizationidDeleteOK), nil

}

/*
PublicCloudEventdrivenharvestEnable enables event driven harvesting

Enables Event Driven Harvesting for the current org
*/
func (a *Client) PublicCloudEventdrivenharvestEnable(params *PublicCloudEventdrivenharvestEnableParams) (*PublicCloudEventdrivenharvestEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvestEnable",
		Method:             "POST",
		PathPattern:        "/public/cloud/eventdrivenharvest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestEnableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestEnableOK), nil

}

/*
PublicCloudEventdrivenharvestProducersDisablePost removes producer

TODO: Add Description
*/
func (a *Client) PublicCloudEventdrivenharvestProducersDisablePost(params *PublicCloudEventdrivenharvestProducersDisablePostParams) (*PublicCloudEventdrivenharvestProducersDisablePostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudEventdrivenharvestProducersDisablePostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudEventdrivenharvestProducersDisablePost",
		Method:             "POST",
		PathPattern:        "/public/cloud/eventdrivenharvest/producers/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudEventdrivenharvestProducersDisablePostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudEventdrivenharvestProducersDisablePostOK), nil

}

/*
PublicCloudProducersListPost lists producers

TODO: Add Description
*/
func (a *Client) PublicCloudProducersListPost(params *PublicCloudProducersListPostParams) (*PublicCloudProducersListPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPublicCloudProducersListPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PublicCloudProducersListPost",
		Method:             "POST",
		PathPattern:        "/public/cloud/producers/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PublicCloudProducersListPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PublicCloudProducersListPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
